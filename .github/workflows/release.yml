name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      shell: bash
      run: |
        # Clean any potential problematic files
        rm -f *.out .out 2>/dev/null || true
        rm -rf .out/ 2>/dev/null || true
        go test -v $(go list ./... | grep -v vendor | grep -v '\.out')
    
    - name: Run go vet
      run: go vet $(go list ./... | grep -v vendor | grep -v '\.out')
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"
          - goos: windows
            goarch: arm64
            suffix: ".exe"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        fi
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        BINARY_NAME="linkchecker-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}"
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o "dist/${BINARY_NAME}" .
        
        # Create archive
        cd dist
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "${BINARY_NAME%.exe}.zip" "${BINARY_NAME}"
        else
          tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}"
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linkchecker-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-assets/
        ls -la release-assets/
    
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk '/^## \['${{ steps.version.outputs.VERSION }}'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > current_changelog.md
          if [ -s current_changelog.md ]; then
            echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
            cat current_changelog.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG_CONTENT=No changelog available for this version." >> $GITHUB_OUTPUT
          fi
        else
          echo "CHANGELOG_CONTENT=## Changes in ${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "- Automated release" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          # Link Checker ${{ steps.version.outputs.VERSION }}
          
          A fast and reliable link checker for markdown files and web pages.
          
          ## Installation
          
          Download the appropriate binary for your platform from the assets below.
          
          ### Linux/macOS
          ```bash
          # Download and extract
          tar -xzf linkchecker-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
          chmod +x linkchecker-${{ steps.version.outputs.VERSION }}-linux-amd64
          sudo mv linkchecker-${{ steps.version.outputs.VERSION }}-linux-amd64 /usr/local/bin/linkchecker
          ```
          
          ### Windows
          Download the `.zip` file and extract the executable.
          
          ## Usage
          ```bash
          # Check markdown files
          linkchecker README.md
          linkchecker --recursive ./docs
          
          # Check web pages
          linkchecker https://example.com
          
          # Advanced options
          linkchecker --only-dead --format=json --workers=20 https://example.com
          ```
          
          ## Changelog
          ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
          
          ## Checksums
          See the checksums.txt file for SHA256 hashes of all binaries.
        files: release-assets/*
        draft: ${{ github.event_name == 'workflow_dispatch' }}
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
        generate_release_notes: true
    
    - name: Generate checksums
      run: |
        cd release-assets
        sha256sum * > checksums.txt
        cat checksums.txt
    
    - name: Upload checksums
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        files: release-assets/checksums.txt 